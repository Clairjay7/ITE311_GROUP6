<?php

namespace App\Models;

use CodeIgniter\Model;

class BillingModel extends Model
{
    protected $table = 'billing';
    protected $primaryKey = 'id';
    protected $useAutoIncrement = true;
    protected $returnType = 'array';
    protected $useSoftDeletes = false;
    protected $protectFields = true;
    protected $allowedFields = [
        'bill_number', 'patient_id', 'admission_id', 'bill_type', 'subtotal',
        'tax_amount', 'discount_amount', 'total_amount', 'insurance_coverage',
        'patient_payable', 'generated_by', 'generated_at', 'status', 'due_date',
        'payment_terms', 'notes'
    ];

    protected bool $allowEmptyInserts = false;
    protected bool $updateOnlyChanged = true;

    protected array $casts = [
        'subtotal' => 'float',
        'tax_amount' => 'float',
        'discount_amount' => 'float',
        'total_amount' => 'float',
        'insurance_coverage' => 'float',
        'patient_payable' => 'float',
        'generated_at' => 'datetime',
        'due_date' => 'datetime'
    ];
    protected array $castHandlers = [];

    // Dates
    protected $useTimestamps = true;
    protected $dateFormat = 'datetime';
    protected $createdField = 'created_at';
    protected $updatedField = 'updated_at';

    // Validation
    protected $validationRules = [
        'patient_id' => 'required|is_natural_no_zero',
        'bill_type' => 'required|in_list[consultation,admission,procedure,medication,lab,emergency,other]',
        'subtotal' => 'permit_empty|decimal',
        'total_amount' => 'permit_empty|decimal',
        'generated_by' => 'required|is_natural_no_zero',
        'generated_at' => 'required|valid_date',
        'status' => 'permit_empty|in_list[draft,pending,paid,partial,cancelled,refunded]'
    ];

    protected $validationMessages = [
        'patient_id' => [
            'required' => 'Patient is required'
        ],
        'generated_by' => [
            'required' => 'Generated by user is required'
        ]
    ];

    protected $skipValidation = false;
    protected $cleanValidationRules = true;

    // Callbacks
    protected $allowCallbacks = true;
    protected $beforeInsert = ['generateBillNumber', 'calculateTotals'];
    protected $afterInsert = [];
    protected $beforeUpdate = ['calculateTotals'];
    protected $afterUpdate = [];
    protected $beforeFind = [];
    protected $afterFind = [];
    protected $beforeDelete = [];
    protected $afterDelete = [];

    protected function generateBillNumber(array $data)
    {
        if (!isset($data['data']['bill_number'])) {
            $data['data']['bill_number'] = 'BILL' . date('Y') . str_pad($this->countAll() + 1, 6, '0', STR_PAD_LEFT);
        }
        return $data;
    }

    protected function calculateTotals(array $data)
    {
        if (isset($data['data']['subtotal'])) {
            $subtotal = $data['data']['subtotal'] ?? 0;
            $taxAmount = $data['data']['tax_amount'] ?? 0;
            $discountAmount = $data['data']['discount_amount'] ?? 0;
            $insuranceCoverage = $data['data']['insurance_coverage'] ?? 0;

            $data['data']['total_amount'] = $subtotal + $taxAmount - $discountAmount;
            $data['data']['patient_payable'] = $data['data']['total_amount'] - $insuranceCoverage;
        }
        return $data;
    }

    /**
     * Get pending bills
     */
    public function pending()
    {
        return $this->where('status', 'pending')->findAll();
    }

    /**
     * Get bills for patient
     */
    public function forPatient($patientId)
    {
        return $this->where('patient_id', $patientId)->orderBy('created_at', 'DESC')->findAll();
    }

    /**
     * Get bills with patient info
     */
    public function getBillsWithPatientInfo($status = null)
    {
        $builder = $this->select('billing.*, 
                                 patients.first_name as patient_first_name,
                                 patients.last_name as patient_last_name,
                                 patients.patient_id as patient_number,
                                 generator.first_name as generated_by_first_name,
                                 generator.last_name as generated_by_last_name')
                        ->join('patients', 'patients.id = billing.patient_id')
                        ->join('users as generator', 'generator.id = billing.generated_by')
                        ->orderBy('billing.generated_at', 'DESC');

        if ($status) {
            $builder->where('billing.status', $status);
        }

        return $builder->findAll();
    }

    /**
     * Get overdue bills
     */
    public function getOverdueBills()
    {
        return $this->select('billing.*, 
                             patients.first_name as patient_first_name,
                             patients.last_name as patient_last_name,
                             patients.patient_id as patient_number')
                    ->join('patients', 'patients.id = billing.patient_id')
                    ->where('billing.due_date <', date('Y-m-d'))
                    ->whereIn('billing.status', ['pending', 'partial'])
                    ->orderBy('billing.due_date', 'ASC')
                    ->findAll();
    }

    /**
     * Get bills by type
     */
    public function getBillsByType($billType)
    {
        return $this->where('bill_type', $billType)
                    ->orderBy('generated_at', 'DESC')
                    ->findAll();
    }

    /**
     * Get billing summary
     */
    public function getBillingSummary($startDate = null, $endDate = null)
    {
        $builder = $this->select('
                        bill_type,
                        status,
                        COUNT(*) as bill_count,
                        SUM(total_amount) as total_amount,
                        SUM(patient_payable) as total_payable
                    ')
                    ->groupBy(['bill_type', 'status']);

        if ($startDate && $endDate) {
            $builder->where('generated_at >=', $startDate)
                   ->where('generated_at <=', $endDate);
        }

        return $builder->findAll();
    }

    /**
     * Search bills
     */
    public function searchBills($searchTerm)
    {
        return $this->select('billing.*, 
                             patients.first_name as patient_first_name,
                             patients.last_name as patient_last_name,
                             patients.patient_id as patient_number')
                    ->join('patients', 'patients.id = billing.patient_id')
                    ->like('patients.first_name', $searchTerm)
                    ->orLike('patients.last_name', $searchTerm)
                    ->orLike('patients.patient_id', $searchTerm)
                    ->orLike('billing.bill_number', $searchTerm)
                    ->orderBy('billing.generated_at', 'DESC')
                    ->findAll();
    }

    /**
     * Get revenue statistics
     */
    public function getRevenueStats($period = 'month')
    {
        $dateFormat = $period === 'year' ? '%Y' : '%Y-%m';
        
        return $this->select("
                        DATE_FORMAT(generated_at, '{$dateFormat}') as period,
                        SUM(total_amount) as total_revenue,
                        SUM(patient_payable) as patient_revenue,
                        COUNT(*) as bill_count
                    ")
                    ->where('status !=', 'cancelled')
                    ->groupBy("DATE_FORMAT(generated_at, '{$dateFormat}')")
                    ->orderBy('period', 'DESC')
                    ->limit(12)
                    ->findAll();
    }

    /**
     * Mark bill as paid
     */
    public function markAsPaid($billId)
    {
        return $this->update($billId, ['status' => 'paid']);
    }

    /**
     * Apply discount to bill
     */
    public function applyDiscount($billId, $discountAmount)
    {
        $bill = $this->find($billId);
        if (!$bill) {
            return false;
        }

        $newTotal = $bill['subtotal'] + $bill['tax_amount'] - $discountAmount;
        $newPayable = $newTotal - $bill['insurance_coverage'];

        return $this->update($billId, [
            'discount_amount' => $discountAmount,
            'total_amount' => $newTotal,
            'patient_payable' => $newPayable
        ]);
    }
}
